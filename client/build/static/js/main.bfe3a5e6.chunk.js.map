{"version":3,"sources":["icon/hotel.jpg","icon/limehome_logo.svg","icon/map_burger.svg","components/Card.js","components/DisplayMapClass.js","components/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","vicinity","state","title","address","result","this","props","places","undefined","replace","setState","class","src","hotel","React","Component","DisplayMapClass","mapRef","lat","long","apiKey","map","isEmptyState","H","window","defaultLayers","service","Platform","apikey","createDefaultLayers","Map","current","vector","normal","center","lng","zoom","pixelRatio","devicePixelRatio","addEventListener","getViewPort","resize","mapevents","Behavior","MapEvents","ui","UI","createDefault","setUpClickListener","evt","coord","screenToGeo","currentPointer","viewportX","viewportY","Math","abs","toFixed","getProperties","url","URL","params","search","URLSearchParams","toString","fetch","then","res","json","console","log","results","dispose","ref","style","height","NavBar","logo","burger","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bfe3a5e6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hotel.56ae9f15.jpg\";","module.exports = __webpack_public_path__ + \"static/media/limehome_logo.202fcb30.svg\";","module.exports = __webpack_public_path__ + \"static/media/map_burger.079652e9.svg\";","import React from 'react';\r\nimport '../css/Card.css';\r\nimport hotel from '../icon/hotel.jpg' ;\r\n\r\n\r\nexport class Card extends React.Component{\r\n\r\n    vicinity = null;\r\n    state = {\r\n        // The map instance to use during cleanup\r\n        title : null,\r\n        address : null\r\n      };\r\n\r\n\r\n    componentDidUpdate() {\r\n\r\n        const result = this.props.places[1];\r\n        if(result.vicinity !== undefined) {\r\n             this.vicinity = result.vicinity.replace(/<br\\s*\\/?>/ig, \"\\r\\n\")\r\n        }\r\n      \r\n        if (this.state.title !== result.title && \r\n            this.state.vicinity !== this.vicinity ) {\r\n            this.setState({ title: result.title });\r\n            this.setState({ address: this.vicinity });\r\n          }\r\n     }\r\n\r\n    render() {\r\n        return (\r\n            <div class=\"card\">\r\n                <div class = \"image\">\r\n                    <img src={hotel}/>\r\n                </div>\r\n            \r\n                <div class=\"content\">\r\n                    <div> <h4>{this.state.title} </h4></div>\r\n                    <div>\r\n                        {this.state.address}\r\n                    </div>\r\n                    <button class =\"button\">Book</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n}","import * as React from 'react';\r\nimport {Card} from './Card.js';\r\nimport '../css/Card.css';\r\n\r\nexport class DisplayMapClass extends React.Component {\r\n  mapRef = React.createRef();\r\n  lat = 0;\r\n  long = 0;\r\n  apiKey = 'NU6enez-BoXwzhlae5czA3JS8UzkTuDWg8cUtToWeME';\r\n\r\n  state = {\r\n    // The map instance to use during cleanup\r\n    map: null,\r\n    isEmptyState: false,\r\n  };\r\n\r\n\r\n\r\n  componentDidMount() {\r\n\r\n    const H = window.H;\r\n    const platform = new H.service.Platform({\r\n        apikey: this.apiKey\r\n    });\r\n\r\n    const defaultLayers = platform.createDefaultLayers();\r\n\r\n    // Create an instance of the map\r\n    const map = new H.Map(\r\n      this.mapRef.current,\r\n      defaultLayers.vector.normal.map,\r\n      {\r\n        // This map is centered over Europe\r\n        center: { lat: 50, lng: 5 },\r\n        zoom: 4,\r\n        pixelRatio: window.devicePixelRatio || 1\r\n      }\r\n    );\r\n    window.addEventListener('resize', () => map.getViewPort().resize());\r\n\r\n    const behavior = new H.mapevents.Behavior(new H.mapevents.MapEvents(map));\r\n\r\n    // Create the default UI components to allow the user to interact with them\r\n    // This variable is unused\r\n    const ui = H.ui.UI.createDefault(map, defaultLayers);\r\n \r\n    this.setState({ map });\r\n    this.setUpClickListener(map);\r\n\r\n  }\r\n\r\n   setUpClickListener(map) {\r\n    // Attach an event listener to map display\r\n    // obtain the coordinates and display in an alert box.\r\n    map.addEventListener('tap', evt => {\r\n      var coord = map.screenToGeo(evt.currentPointer.viewportX,\r\n              evt.currentPointer.viewportY);\r\n      this.lat = Math.abs(coord.lat.toFixed(4));\r\n      this.long = Math.abs(coord.lng.toFixed(4)); \r\n\r\n      this.setState({ isEmptyState : true })\r\n      \r\n      this.getProperties();\r\n    });\r\n\r\n  };\r\n\r\n\r\n  getProperties() {\r\n\r\n    var url = new URL('/api/properties');\r\n    \r\n    var params = {lat: this.lat, long: this.long, apiKey:this.apiKey};\r\n\r\n    url.search = new URLSearchParams(params).toString();\r\n    fetch(url)\r\n    .then(res => res.json())\r\n    .then(res => { console.log(res.results);this.setState({ places: res.results })});\r\n  }\r\n  \r\n\r\n\r\n  componentWillUnmount() {\r\n    // Cleanup after the map to avoid memory leaks when this component exits the page\r\n    this.state.map.dispose();\r\n  }\r\n\r\n   \r\n\r\n  render() {\r\n    return (\r\n      // Set a height on the map so it will display\r\n      <div class=\"container\">\r\n        <div class=\"box\" ref={this.mapRef} style={{ height: \"500px\" }} />\r\n        <div class=\"stack-top\"> {this.state.isEmptyState && <Card places = {this.state.places} /> }</div> \r\n      </div>\r\n    );\r\n  }\r\n}","import * as React from 'react';\r\nimport logo from '../icon/limehome_logo.svg' ;\r\nimport burger from '../icon/map_burger.svg' ;\r\nimport '../css/NavBar.css';\r\n\r\nexport class NavBar extends React.Component{\r\n    render() { \r\n        return (\r\n            <div class=\"nav\">\r\n              <div class = \"logo\"><img src={logo} /> </div> \r\n              <div class = \"burger\"><img src={burger} /> </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport {DisplayMapClass} from './components/DisplayMapClass.js';\nimport {NavBar} from './components/NavBar.js';\n\nfunction App() {\n  return (\n    <div>\n    <NavBar/>\n    <div>\n      <DisplayMapClass/>\n    </div>\n  </div> \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}